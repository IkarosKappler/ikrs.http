/**
 * An example FileHandler to demonstrate how to process XML
 * documents that were passed using HTTP POST.
 *
 *
 * @author Ikaros Kappler
 * @date 2013-03-15
 * @version 1.0.0
 **/

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.text.ParseException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;

import ikrs.httpd.AbstractFileHandler;
import ikrs.httpd.Constants;
import ikrs.httpd.DataFormatException;
import ikrs.httpd.DefaultPostDataWrapper;
import ikrs.httpd.FileHandler;
import ikrs.httpd.HeaderFormatException;
import ikrs.httpd.HTTPHandler;
import ikrs.httpd.HTTPHeaderLine;
import ikrs.httpd.HTTPHeaders;
import ikrs.httpd.PostDataWrapper;
import ikrs.httpd.Resource;
import ikrs.httpd.UnsupportedFormatException;
import ikrs.httpd.resource.ByteArrayResource;
import ikrs.httpd.datatype.FormData;
import ikrs.httpd.datatype.FormDataItem;
import ikrs.httpd.datatype.HeaderParams;
import ikrs.io.BytePositionInputStream;
import ikrs.util.CustomLogger;
import ikrs.util.Environment;
import ikrs.util.KeyValueStringPair;
import ikrs.util.MIMEType;
import ikrs.util.session.Session;
import ikrs.typesystem.BasicType;

public class XMLExampleHandler
    extends AbstractFileHandler {


    /**
     * The constructor without arguments (!) MUST exist to allow the system
     * to instantiate the class by the use of the Class.newInstance() method.
     **/
    public XMLExampleHandler() {
	super();

	
    }


    //--- BEGIN ------------------------ FileHandler implementation ------------------------------
    /**
     * Most file handlers operate on existing files that are located inside the local file 
     * system (such as the default handler does for simple file delivery).
     *
     * Some file handlers operate on virtual file systems, which means that the request URI does
     * not necessarily address an existing file but a symbol only the handler may know. 
     *
     * The global HTTP handler needs to know if to throw a MissingResourceException (resulting
     * in a 404) if a requested file does not exists --- or if to ignore that fact and simply 
     * continue.
     *
     * This method tells how to proceed.
     *
     * If your implementation returns true this handler will not be called at all; the request
     * processing will directly stop raising an HTTP status 404.
     *
     * @return true if this file handler definitely requires existing files. The process(...) 
     *              method will never be called if the requested file does not exist in that case.
     **/
    public boolean requiresExistingFile() {

	// Requested files do not necessarily have to exist :)
	return false;
    }

    /**
     * The 'process' method is very generic. It depends on the underlying implementation how the passed
     * file should be processed.
     *
     * @param sessionID   The current session's ID.
     * @param headers     The HTTP request headers.
     * @param postData    The HTTP post data; if the method is not HTTP POST the 'postData' should be null
     *                    (or empty).
     * @param file        The requested file itself (inside the local file system).
     * @param requestURI  The requested URI (relative to DOCUMENT_ROOT).
     **/
    public Resource process( UUID sessionID,
			     HTTPHeaders headers,
			     PostDataWrapper postData,
			     File file,
			     URI requestURI )
	throws IOException,
	       HeaderFormatException,
	       DataFormatException,
               UnsupportedFormatException {
	    

	getLogger().log( Level.INFO,
			 getClass().getName() + ".process(...)",
			 "Processing. requestURI=" + requestURI + ". file=" + file.getAbsolutePath() );

	
	/*
	// Print POST data on stdout
	byte[] buf = new byte[ 256 ];
	int len;
	while( (len = postData.getInputStream().read(buf)) != -1 ) {
	    for( int i = 0; i < len; i++ )
		System.out.print( (char)buf[i] );
	}
	*/

	
	// The XML parser only works with POST data
	if( postData == null )  
	    throw new DataFormatException( "You MUST send your XML document via HTTP POST!" );
	    
	
	FormData formData        = postData.readFormData();
	/*Set<String> formDataKeys = formData.keySet();
	Iterator<String> keyIter = formDataKeys.iterator();
	while( keyIter.hasNext() ) {

	    FormDataItem item = formData.get( keyIter.next() );
	    System.out.println( "Item[*]=" + item );

	    }*/

	for( int i = 0; i < formData.size(); i++ ) {

	    FormDataItem item = formData.get(i);
	    System.out.println( " +++ Item["+i+"]=" + item );
	    
	    // Parse header values (deep parse)
	    for( int h = 0; h < item.getHeaders().size(); h++ ) {

		HTTPHeaderLine header = item.getHeaders().get( h );
		HeaderParams params = new HeaderParams( header.getKey(), header.getValue() );
		System.out.println( " +++ +++ (key=" + header.getKey() + ")" );
		System.out.println( " +++ +++ params["+i+"]["+h+"]=" + params.getMainToken() );
		for( int l = 0; l < params.getSublevelCount(h); l++ )
		    System.out.println( " +++ +++ +++ token["+i+"]["+h+"]["+l+"]=" + params.getToken(h,l) );

	    }

	}
	

	
	// Fetch passed params
	if( formData.size() == 0 )
	    throw new HeaderFormatException( "No params passed (but required)." );

	// There should be exactly one boundary part ...
	// ...


	Session<String,BasicType,ikrs.httpd.HTTPConnectionUserID> session = this.getHTTPHandler().getSessionManager().get( sessionID );
	

	String data = 
	    "This is a test.\n" +
	    "\n" +
	    "TODO: implement the actual XML parser to the " + getClass().getName() + " class!\n";


	ByteArrayResource resource = new ByteArrayResource( this.getHTTPHandler(),
							    this.getLogger(),
							    data.getBytes(),
							    false   // no need to use fair locks
							    );

	// I want this output to be displayed as plain text.
	// One other posible way would be
	//   MIMEType mimeType = new MIMEType( "text/plain" );
	MIMEType mimeType = MIMEType.getByFileExtension( "txt" );
	resource.getMetaData().setMIMEType( mimeType );
	resource.getMetaData().setCharsetName( "UTF-8" );
		
	return resource;
    }
    //--- END -------------------------- FileHandler implementation ------------------------------


    


}
