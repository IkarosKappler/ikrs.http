package ikrs.http.response.successfull;

/**
 * This interface is meant to wrap prepared HTTP reply objects.
 *
 * @author Ikaros Kappler
 * @date 2012-07-16
 * @version 1.0.0
 **/

import java.io.IOException;
import java.net.Socket;
import java.util.UUID;

import ikrs.http.Constants;
import ikrs.http.HTTPHandler;
import ikrs.http.HTTPHeaders; 

public class SuccessResponse_OK
    extends AbstractPreparedResponse {


    public SuccessResponse_OK( HTTPHandler handler,
			       HTTHeaders headers,
			       UUID socketID,
			       Socket socket ) {
	super( handler, headers, sockerID, socket );
    }
    

    /**
     * This method executes the prepared reply; this means that all necessary resources will be accessed,
     * the actual reply built and sent back to the client.
     *
     * @throws SecurityException If any resource is not abailable for the requesting client.
     * @throws HTTPException     If any HTTP exception occurs.
     * @throws IOException       If reading or writing from/to the socket's streams fails.
     **/
    public void execute()
	throws SecurityException,
	       IOException {

	// Send fake reply
	    java.io.PrintWriter out = new java.io.PrintWriter( new java.io.OutputStreamWriter(this.socket.getOutputStream()) );
	    String fakeReply = "Sorry, this server is still under construction and the request handler is not yet implemented.";

	    /*
	    out.println( "HTTP/1.1 "+Constants.HTTP_STATUS_SUCCESSFUL_OK+" OK" );
	    out.println( "Server: Apache/1.3.29 (Unix) PHP/4.3.4" );
	    out.println( "Content-Length: " + fakeReply.length() );
	    out.println( "Content-Language: en" );
	    out.println( "Connection: close" );
	    out.println( "Content-Type: text/plain" );
	    out.println( "" );
	    out.println( fakeReply );
	    out.flush();
	    */
	

    }


}
