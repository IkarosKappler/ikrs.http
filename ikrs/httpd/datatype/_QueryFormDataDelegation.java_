package ikrs.httpd.datatype;

/**
 * The QueryFormDataDelegation is a wrapper class that wraps a single Query object (a key-value-map)
 * into a FormData instance.
 *
 * @author Ikaros Kappler
 * @date 2012-10-04
 * @version 1.0.0
 *
 * @deprecated Do NOT use this class any more!
 **/


import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import ikrs.util.KeyValueStringPair;


public class QueryFormDataDelegation
    extends AbstractFormData {

    /**
     * The query to be mapped to the FormData specification.
     **/
    private Query query;

    
    /**
     * Constructs a new QueryFormDataDelegation.
     **/
    public QueryFormDataDelegation( Query query ) 
	throws NullPointerException {

	super();

	if( query == null )
	    throw new NullPointerException( "Cannot create a QueryFormDataDelegation from a null-query." );

	this.query = query;
    }

    //--- BEGIN ------------------- AbstractFormData implementation --------------------
    /**
     * This method returns the FormDataItem with the given map key.
     * 
     * @param name The item's name.
     * @return The item with the given name or null if no such key
     *         can be found.
     * @throws NullPointerException If the passed name is null.
     **/
    public FormDataItem get( String name ) {
	
	String value = this.query.getParam( name );
	if( value == null )
	    return null;

	return new FormDataItem( name, value );
    }

    /**
     * Get the internal map's key set.
     * Note that the returned set will be immutable!
     *
     * @return The set of all keys mapped in the internal map.
     *         The returned set is never null.
     **/
    public Set<String> keySet() {
	return this.query.keySet();
    }

    /**
     * Get the nunber of keys that are mapped inside this form data wrapper.
     *
     * @return The number of mapped keys.
     **/
    public int size() {
	return this.query.size();
    }

     /**
     * Add a new FormDataItem.
     *
     * If a different item with the same key already exists it will be
     * overwritten.
     *
     * @param item The form data item to be added.
     * @throws NullPointerException If the passed item is null.
     **/
    public void add( FormDataItem item ) 
	throws NullPointerException {

	if( item == null )
	    throw new NullPointerException( "Cannot add null-items to QueryFormDataDelegation instances." );

	this.query.addParam( item.getKey(),
			     item.getValue() );	
    }
    //--- END --------------------- AbstractFormData implementation --------------------

    public String toString() {
	return this.query.toString();
    }

}