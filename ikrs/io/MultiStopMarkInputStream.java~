package ikrs.io;

/**
 * The MultiStopMarkInputStream is an enhancement of the normal 
 * StopMarkInputStream class, it supports a whole set of stop marks
 * to be passed, which split the underlying inputstream into tokens
 * each time one of the stop mark as found.
 *
 * The order or the passed stop marks is the order the input sequence
 * will be matched for the marks.
 *
 * @author Ikaros Kappler
 * @date 2013-04-09
 * @version 1.0.0
 **/

import java.io.InputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class MultiStopMarkInputStream 
    extends InputStream {

    /* The underlying input stream. */
    private InputStream in;

    /* The current (nested) streams, the upper stream at index 0, the lower at highest index. 
     *
     * Idea: new StopMarkInputStream( new StopMarkInputStream( new StopMarkInputStream(...) ) )
     **/
    private StopMarkInputStream[] currentStreams;

    /* The passed stop marks. */
    private List<byte[]> stopMarks;

    /* An internal flag indicating if EOI was reached. */
    private boolean eoiReached;
    
    /* If any of the stored input streams reached the assigned stop mark this int stores its index. */
    private int stopMarkReachedIndex;
    
    /* Will be set to true if the close() method was reached. */
    private boolean isClosed;
    

    /**
     * Creates a new MultiStopMarkInputStream.
     *
     * @param in The underlying input stream.
     * @param stopMarks A non-empty and non-null list of stop marks to be used. The order of the
     *                  marks is the final detection order, beginning at index 0.
     * @throws NullPointerException If 'in' is null or 'stopMarks' is null or the list contains
     *                              any null items.
     * @throws IllegalArgumentException If the passed list is empty.
     **/
    public MultiStopMarkInputStream( InputStream in,
				     List<byte[]> stopMarks ) 
	throws NullPointerException,
	       IllegalArgumentException {

	this( in, stopMarks, true ); // copy list
    }

    public MultiStopMarkInputStream( InputStream in,
				     List<byte[]> stopMarks,
				     boolean copyList ) 
	throws NullPointerException,
	       IllegalArgumentException {
	super();

	if( in == null )
	    throw new NullPointerException( "Cannot create MultiStopMarkInputStream from null-input." );
	if( stopMarks == null )
	    throw new NullPointerException( "Cannot create MultiStopMarkInputStream with null-list." );
	if( stopMarks.size() == 0 )
	    throw new IllegalArgumentException( "Cannot create MultiStopMarkInputStream with empty list." );

	this.in           = in;	
	//this.currentToken = null;


	// Copy and check entries from the list
	if( copyList ) 
	    this.stopMarks    = new ArrayList<byte[]>( stopMarks.size() );
	for( int i = 0; i < stopMarks.size(); i++ ) {
	    
	    byte[] stopMark = stopMarks.get(i);
	    if( stopMark == null )
		throw new NullPointerException( "Cannot create MultiStopMarkInputStream with null-marks (index " + i + ")." );
	    // Allow empty marks?
	    // ...
	    
	    // Check for duplicates?
	    // ...
	    if( copyList )
		this.stopMarks.add( stopMark );
	}

	if( !copyList )
	    this.stopMarks = stopMarks;
	    

	// Init the stream buffer
	this.currentStreams       = new StopMarkInputStream[ stopMarks.size() ];
	this.stopMarkReachedIndex = -1;
	this.eoiReached           = false;
	this.isClosed             = false;
    }

    //--- BEGIN -------------------- InputStream implementation -------------------
    public int read()
	throws IOException {
	
	if( this.eoiReached() )
	    return -1;
	
	if( this.stopMarkReached() )
	    return -1;

	// First call?
	if( this.currentStreams[0] == null )
	    nextToken();

	// Try to read next byte
	int b = this.currentStreams[0].read();
	if( b == -1 ) {
	    // Find the stream that reached the stop mark
	    this.stopMarkReachedIndex = this.locateReachedStopMarkIndex();
	    
	    if( this.stopMarkReachedIndex == -1 ) {
		// EOI reached!
		this.eoiReached = true;
	    } 
	}

	return b;
    }

    public int available() 
	throws IOException {
	
	if( this.in.available() <= 0 ) {

	    return 0;

	} else {

	    return -1; // ??? 

	}
    }

    public void close() 
	throws IOException {
	
	this.isClosed = true;
	
	// Do NOT forward call to the underlying input stream.
	// Closing given (!) streams is not our concern.
    }

    public void mark( int readlimit ) {
	// NOOP (mark not supported)
    }

    public boolean markSupported() {
	return false;
    }

    public void reset() 
	throws IOException {
	
	throw new IOException( "The MultiStopMarkInputStream does not supported the reset() method." );

    }

    public long skip( long n ) 
	throws IOException {

	if( this.isClosed )
	    throw new IOException( "This stream was already closed. Cannot skip input." );

	return this.currentStreams[ 0 ].skip( n );
	/*long skipped = this.in.skip( n );

	// Buffer data becomes invalid when skipping!
	this.buffer.clear();

	return skipped;
	*/
    }
    //--- END ---------------------- InputStream implementation -------------------
    
    public boolean continueStream() {
	if( this.eoiReached || this.isClosed )
	    return false;
	if( this.stopMarkReachedIndex == -1 )
	    return true;
	
	// System.out.println( "Continuing stream " + this.stopMarkReachedIndex );
	for( int i = this.stopMarkReachedIndex; i >= 0; i-- ) {
	    // true means: override EOI
	    // because: the underlying stream(s) returned -1 because a stop mark
	    //          was reached; the aboslute EOI possible has not yet been reached.
	    this.currentStreams[i].continueStream( true );  
	}

	this.stopMarkReachedIndex = -1;
	return true;
    }

    public boolean stopMarkReached() {
	return (this.stopMarkReachedIndex != -1);
    }

    public int getReachedStopMarkIndex() {
	return this.stopMarkReachedIndex;
    }

    public byte[] getReachedStopMark() {
	if( this.stopMarkReachedIndex == -1 )
	    return null;
	else
	    return this.stopMarks.get( this.stopMarkReachedIndex );
    }

    public boolean eoiReached() {
	return this.eoiReached;
    }

    private int locateReachedStopMarkIndex() {
	for( int i = 0; i < this.currentStreams.length; i++ ) {
	    //System.out.println( "Stop mark " + i + " reached: " + this.currentStreams[i].stopMarkReached() );
	    if( this.currentStreams[i].stopMarkReached() ) {
		//System.out.println( "Stream["+i+"] reached the stop mark: " + new String(this.stopMarks.get(i)) );
		return i;
	    }
	}
	return -1;
    }

    private void nextToken() {

	// There is at least one stop mark (list cannot be empty).
	this.currentStreams[this.stopMarks.size()-1] = new StopMarkInputStream( in, 
										 this.stopMarks.get( this.stopMarks.size()-1 ) 
								 );
	for( int i = this.stopMarks.size()-2; i >= 0; i-- ) {

	    this.currentStreams[i] = new StopMarkInputStream( this.currentStreams[i+1], 
							      this.stopMarks.get(i) 
							      );

	}

	//this.currentToken = nextToken;
    }

    /** Just for testing **/
    public static void main( String[] argv ) {

	try {
	    String[] stopMarks = new String[] {
		"%MARK_0%",
		"%MARK_A%",
		"%MARK_B%",
		"%MARK_C%"
	    };
	    String data = 
		stopMarks[0] +
		"This " + 
		stopMarks[3] + 
		" is a " + 
		stopMarks[2] + 
		" very simple " + 
		stopMarks[1] + 
		" test.";
	    List<byte[]> stopMarkList = new ArrayList<byte[]>( stopMarks.length );
	    System.out.println( "Stop marks: " );
	    for( int i = 0; i < stopMarks.length; i++ ) {
		System.out.println( " [" + i + "] " + stopMarks[i] );
		stopMarkList.add( stopMarks[i].getBytes("UTF-8") );
	    }
	    System.out.println( "\n" );
	    System.out.println( " data: " + data );
	    
	     

	    MultiStopMarkInputStream in = 
		new MultiStopMarkInputStream( new java.io.ByteArrayInputStream(data.getBytes("UTF-8")),
					      stopMarkList );
	    
	    int i = 0;
	    while( !in.eoiReached() && i < 10 ) {
		int b = -1;
		while( (b = in.read()) != -1 ) {
		    System.out.print( (char)b );
		}
		System.out.println( "" );
		byte[] reachedStopMark = in.getReachedStopMark();
		System.out.println( "Stop mark " + in.getReachedStopMarkIndex() + " found: " + (reachedStopMark==null?"null":new String(reachedStopMark)) );
		
		in.continueStream();
		i++;
	    }


	} catch( IOException e ) {
	    e.printStackTrace();
	}

    }
}