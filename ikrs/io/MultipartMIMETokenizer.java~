package ikrs.io;

/**
 *  The format of the multipart-body is:
 *  ------------------------------------
 *  boundary        := 0*69<bchars> bcharsnospace
 *  bchars          := bcharsnospace / " "
 *  bcharsnospace   := DIGIT / ALPHA / "'" / "(" / ")" /
 *                     "+" / "_" / "," / "-" / "." /
 *                     "/" / ":" / "=" / "?"
 *
 * --- with --------------------------
 *
 *  multipart-body  := [preamble CRLF]
 *                     dash-boundary transport-padding CRLF
 *                     body-part *encapsulation
 *                     close-delimiter transport-padding
 *                     [CRLF epilogue]
 *  dash-boundary   := "--" boundary
 *  encapsulation   := delimiter transport-padding
 *                     CRLF body-part
 *  delimiter       := CRLF dash-boundary
 *  close-delimiter := delimiter "--"
 *
 * --- Example: ----------------------
 *  --boundary
 *  1. body-part
 *  --boundary
 *  2. body-part
 *  --boundary
 *  3. body-part
 *  --boundary--
 *
 * (See http://stackoverflow.com/questions/4656287/what-rules-apply-to-mime-boundary)
 *
 * So to detect if the last boundary is reached we need to check if the next
 * body-party begins with 
 * '--' CRLF
 *
 * This can only be done using a pushback input stream.
 *
 *
 * @authior Ikaros Kappler
 * @date 2012-10-10
 * @version 1.0.0
 **/

import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.Iterator;

public class MultipartMIMETokenizer 
    extends ByteSequenceTokenizer {

    /**
     * Constructs a new multpiart-MIME tokenizer.
     *
     * The pushback input stream MUST have a pushback buffer size of at least 4.
     *
     * @param in       The input stream to read from.
     * @param boundary The boundary from the HTTP headers, WITHOUT the leading or trailing '--' respective CRLF!
     **/
    protected MultipartMIMETokenizer( PushbackInputStream in,
				      String boundary )
	throws NullPointerException {

	super( in, new String("--" + boundary).getBytes() );
    }


    /**
     * The 
     *
     * @override
     **/
    public InputStream getNextToken() 
	throws IOException {

	
	InputStream token = super.getNextToken();
	if( token == null )
	    return null;


	// ...
	return token;	
    }





    public static void main( String[] argv  ) {

	try {

	    String filename;
	    String stopMark;
	    if( argv.length >= 1 ) filename = argv[0];
	    else                   filename = "document_root_alpha/example.POST_DATA.txt";

	    if( argv.length >= 2 ) stopMark = argv[1];
	    else                   stopMark = "----WebKitFormBoundaryeANQMKoBwsmwQrYZ";


	    System.out.println( "Using stopMark: " + stopMark  );
	    System.out.println( "Reading file until stopMark will be found ... ");
	    java.io.FileInputStream fin = new java.io.FileInputStream( new java.io.File(filename) );
	    PushbackInputStream pbin    = new PushbackInputStream( fin, 4 );
	    MultipartMIMETokenizer tokenizer = new MultipartMIMETokenizer( pbin, 
									   stopMark );
	    
	    InputStream token;
	    int i = 0;
	    while( (token = tokenizer.getNextToken()) != null ) {
		
		int b;
		System.out.println( "Reading bytes from token ["+i+"] ..." );
		int len = 0;
		while( (b = token.read()) != -1 ) {

		    System.out.print( (char)b );
		    len++;

		}


		System.out.println( "\n" + len +" bytes read from token [" + i+ "]." );
		System.out.println( "----------------------------------------------" );

		token.close();

		i++;
	    }

	} catch( IOException e ) {

	    e.printStackTrace();

	}

    }


}