package ikrs.io.fileio;

/**
 * The standard java libraries have no file- and directory- copy routines.
 *
 * This class is a simple solution.
 *
 * @author Ikaros Kappler
 * @date 2012-12-19
 * @version 1.0.0
 **/

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;


public class FileCopy {

    /**
     * The default buffer size to use (in bytes).
     **/
    public static final int DEFAULT_BUFFER_SIZE = 1024;

    
    /**
     * Copy the data from source to destination.
     * Source and destination MUST be regular files or directories.
     *
     * There are four possible cases. Example:
     *  (i)   source      is a regular file,
     *        destination is a regular file.
     *       
     *         Then the bytes from source will be written into the destination.
     *
     *  (ii)  source is a directory,
     *        destination is a regular file.
     *
     *         This will cause an IllegalArgumentException to be thrown!
     *  
     *  (iii) ...
     *
     *  (iv)  ...
     *
     **/
    public static long copy( File source,
			     File destination ) 
	throws NullPointerException,
	       IllegalArgumentException,
	       IOException {

	
	if( source == null )
	    throw new NullPointerException( "Cannot read from null-source." );
	if( !source.isDirectory() && !source.isFile() )
	    throw new IllegalArgumentException( "Cannot read from source '" + source.getPath() + "': it's not a file nor a directory." );

	if( destination == null )
	    throw new NullPointerException( "Cannot write to null-destination." );
	if( !destination.isDirectory() && !destination.isFile() )
	    throw new IllegalArgumentException( "Cannot write to destination '" + destination.getPath() + "': it's not a file nor a directory." );

	
	if( source.isDirectory() ) {

	    if( !destination.isDirectory() )
		throw new IllegalArgumentException( "" );

	}

    }

    /**
     * Transfer all bytes from the given input stream into the destination output stream.
     *
     * The method returns the number of bytes that were actually transfered during the progress.
     *
     * @param source      The input stream to read from.
     * @param destination The output stream to write to.
     * @param bufferSize  The buffer size to use (a value from 512 to 2048 should be okay for most purposes).
     * @throws NullPointerException     If source or destination is null.
     * @throws IllegalArgumentException If the buffer size is not in range (must be > 0).
     * @throws IOException              If any IO errors occur.
     **/
    public static long transfer( InputStream source,
				 OutputStream destination,
				 int bufferSize )
	throws NullPointerException,
	       IllegalArgumentException,
	       IOException {
    
	if( source == null )
	    throw new NullPointerException( "Cannot read from null-source." );
	if( destination == null )
	    throw new NullPointerException( "Cannot write to null-destination." );
	if( bufferSize <= 0 )
	    throw new IllegalArgumentException( "The buffer size must be bigger than zero (is " + bufferSize + ")." );
	

	byte[] buffer = new byte[ bufferSize ];
	int len;
	long totalLength = 0L;
	while( (len = source.read(buffer)) > 0 ) {

	    destination.write( buffer, 0, len );
	    totalLength += len;

	}

	return totalLength;
    }
    


}