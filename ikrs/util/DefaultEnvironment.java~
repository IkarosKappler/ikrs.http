package ikrs.util;

/**
 * This is the default Environmen implementation.
 *
 * @author Henning Diesenberg
 * @date 2012-04-24
 * @version 1.0.0
 **/ 

import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;

public class DefaultEnvironment<K,V> 
    extends TreeMap<K,V>
    implements Environment<K,V> {

    /* The MapFactory that will be used to create child maps */
    private MapFactory<K,V> 
	mapFactory;

    /* The comparator for the map's key set */
    private Comparator<K>
	keyComparator;
    
    /* The parent environment (if exists) */
    private Environment<K,V>
	parentEnvironment;

    /* The child environments - if the set is empty this environment is a leaf */
    private Map<String,Environment<K,V>> 
	children;

    /*public DefaultEnvironment()  
	throws NullPointerException {

	this.mapFactory = new TreeMapFactory<K,V>( CaseInsensitiveComparator.sharedInstance );
	this.keyComparator = keyComparator;
	this.children = new TreeMap<String,Environment<K,V>>( CaseInsensitiveComparator.sharedInstance );
	}*/

    /**
     * Create a new Environment with the given MapFactory.
     * @param mapFactory The map factory that will be used to create
     *                   new internal child maps.
     **/
    public DefaultEnvironment( MapFactory<K,V> mapFactory )  
	throws NullPointerException {

	super();

	this.mapFactory = mapFactory;	
	this.children = new TreeMap<String,Environment<K,V>>( CaseInsensitiveComparator.sharedInstance );
    }

    /**
     * Create a new Environment with the given MapFactory.
     * @param mapFactory The map factory that will be used to create
     *                   new internal child maps.
     * @param keyComparator The key comparator for this map.
     **/
    public DefaultEnvironment( MapFactory<K,V> mapFactory,
			       Comparator<K> keyComparator )  
	throws NullPointerException {

	super( keyComparator );

	this.mapFactory = mapFactory;
	this.keyComparator = keyComparator;
	this.children = new TreeMap<String,Environment<K,V>>( CaseInsensitiveComparator.sharedInstance );
    }

    /**
     * Create a new Environment with the given MapFactory.
     * @param mapFactory The map factory that will be used to create
     *                   new internal child maps.
     * @param keyComparator The key comparator for this map.
     * @param parentEnvironment The parent environment (if exists).
     **/
    public DefaultEnvironment( MapFactory<K,V> mapFactory,
			       Comparator<K> keyComparator,
			       Environment<K,V> parentEnvironment ) 
	throws NullPointerException {

	super( keyComparator );

	this.mapFactory = mapFactory;
	this.keyComparator = keyComparator;
	this.children = new TreeMap<String,Environment<K,V>>( CaseInsensitiveComparator.sharedInstance );
	this.parentEnvironment = parentEnvironment;	
    }

    //---BEGIN---------------- Environment --------------------
    /**
     * Get the environments parent. If there is no parent the method will
     * return null.
     * 
     * Only the root environment has not parent.     * 
     **/
    public Environment<K,V> getParent() {
	return this.parentEnvironment;
    }
  
    /**
     * Get the child environment with the given name.
     * 
     * If no such child exists the method returns null.
     * 
     * @param name The child's name (if the child search is case sensitive
     *             depends on the actual implementation).
     * @see DefaultEnvironment
     **/
    public Environment<K,V> getChild( String name ) {
	return this.children.get( name );
    }

    /**
     * This method creates a new child environment and returns it.
     *
     * Note: if a child with the given name already exists there will be
     *       no modifications to the environment.
     *
     * @param name The child's name.
     **/
    public Environment<K,V> createChild( String name ) {
	// First check if the child already exists
	Environment<K,V> child = this.children.get( name );
	if( child == null ) {
	    // Create new child
	    child = new DefaultEnvironment<K,V>( this.mapFactory,
						 this.keyComparator,
						 this    // parentEnvironment
						 );
	    
	    // Add to internal list
	    this.children.put( name, child );

	}

	return child;
    }

     /**
     * This method removes the child with the given name and returns
     * its old value.
     *
     * If no such child can be found the method returns null.     *
     *
     * @param name The child's name.
     **/
    public Environment<K,V> removeChild( String name ) {
	Environment<K,V> child = this.children.remove( name );
	
	return child;
    }

    /**
     * This method returns the number of all children.
     * 
     **/
    public int getChildCount() {
	return this.children.size();
    }
    //---END------------------ Environment --------------------
}