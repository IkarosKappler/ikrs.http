package ikrs.util.session;

/**
 * The DefaultSessionManager is a very simple SessionManager implementation that uses a
 * treemap to find sessions by their ID.
 *
 * The search for user IDs is linear!
 *
 * All methods are synchronized (this manager implementation acts like a monitor).
 *
 *
 * @author Ikaros Kappler
 * @date 2012-09-06
 * @version 1.0.0
 **/

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;



public class DefaultSessionManager<K,V,U>
    implements SessionManager<K,V,U> {

    /**
     * A map containing the sessions.
     **/
    private TreeMap<UUID,Session<K,V,U>> sessionIDMap;

    /**
     * A map containing the sessions, accessible by their user IDs.
     **/
    private TreeMap<U,Session<K,V,U>> sessionUserMap;

    /**
     * The max age for all sessions (after inactivity).
     **/
    private int sessionTimeout_seconds;

    /**
     * Create a new DefaultSessionManager.
     *
     **/
    public DefaultSessionManager( int sessionTimeout_seconds ) 
	throws IllegalArgumentException {

	super();

	if( sessionTimeout_seconds <= 0 )
	    throw new IllegalArgumentException( "The manager's session timeout must be greater than zero." );

	this.sessionTimeout_seconds = sessionTimeout_seconds;



	this.sessionIDMap   = new TreeMap<UUID,Session<K,V,U>>();
	this.sessionUserMap = new TreeMap<U,Session<K,V,U>>();
    }
    
    //--- BEGIN --------------------------- SessionManager ----------------------------------------
    /**
     * Retrieve the session with the given SID.
     *
     * If the session cannot be found (does not exist or timed out) the method returns null.
     *
     * @param sessionID The desired session's unique ID.
     * @return The session with the given ID or null if no such session can be found.
     **/
    public synchronized Session<K,V,U> get( UUID sessionID ) {
	    return this.sessionIDMap.get( sessionID );
    }

    
    
    /**
     * Thie methos destroys the session with the specified SID. 
     * That means that all session data will be removed and the session itself becomes invalid. It
     * will not be accessible or retrievable any more using on of this interface's methods.
     *
     * @param sessionID The unique ID of the session you want to destroy.
     * @return True if the session was found (and so destroyed) or false otherwise.
     **/
    public synchronized boolean destroy( UUID sessionID ) {

	    // Try to remove the session from inside the map
	    Session<K,V,U> session = this.sessionIDMap.remove( sessionID );
	    
	    // Found?
	    if( session == null )
		return false;


	    session.clear();
	    return true;	    
    }



    /**
     * This method tries to create a new session for the given user (ID). If there is already
     * a session for the given user no new session will be created but the existing one returned.
     *
     * @param userID The user (ID) to create the new session for.
     **/
    public synchronized Session<K,V,U> bind( U userID ) {
	
	    // Locate the session by user (user must not change!)
	    

	    // Try to locate the session (check if already exists)
	    Session<K,V,U> session = this.sessionUserMap.get( userID );
	    
	    // Found?
	    if( session != null )
		return session;

	    // else: create
	    //session = new DefaultSession( );
	    ...


	    return session;

    }
    //--- END ----------------------------- SessionManager ----------------------------------------


    /**
     * This method removes all sessions from the map that haven't been accessed (read OR write)
     * for at least the configured timeout interval.
     *
     * Note: this method is _NOT_ synchronized!
     *       It must be called from synchronized methods only!
     **/
    private void removeTimedOutSessions() {

	Iterator<Map.Entry<UUID,Session<K,V,U>>> iter = this.sessionIDMap.entrySet().iterator();
	Date minAliveDate = new Date( System.currentTimeMillis() - (this.sessionTimeout_seconds * 1000L) );
	
	while( iter.hasNext() ) {

	    // Get next entry
	    Map.Entry<UUID,Session<K,V,U>> entry = iter.next();
	    UUID sid                             = entry.getKey();
	    Session<K,V,U> session               = entry.getValue();

	    
	    Date lastAccess = session.getLastAccessTime();
	    // Session is too old?
	    if( lastAccess.before(minAliveDate) ) {

		// The removal is safe IF performed through the _iterator_'s remove-method! :)
		session.clear();
		iter.remove();

	    }
	    
	}
	
    }

}