package ikrs.yuccasrv.util;

/**
 * This XML reader was inspired by
 * http://www.java-tips.org/java-se-tips/javax.xml.parsers/how-to-read-xml-file-in-java.html
 *
 * @author Henning Diesenberg
 * @date 2012-04-24
 * @version 1.0.0
 **/


import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.text.Collator;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


import ikrs.typesystem.*;
import ikrs.util.*;

public class ConfigReader {
    
    public static Environment<String,BasicType> read( File file )
	throws IOException {
	
	Comparator<String> comp = CaseInsensitiveComparator.sharedInstance;
	Environment<String,BasicType> env = 
	    new DefaultEnvironment<String,BasicType>( new TreeMapFactory<String,BasicType>( comp ) );

	try {
	    
	    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	    DocumentBuilder db = dbf.newDocumentBuilder();
	    Document doc = db.parse(file);
	    doc.getDocumentElement().normalize();

	    read( doc, env );
	    return env;

	} catch (Exception e) {

	    e.printStackTrace();
	    return null;
	    
	}

    }

    protected static void read( Document doc,
				Environment<String,BasicType> env ) {
							 
	System.out.println("Root element " + doc.getDocumentElement().getNodeName());
	NodeList nodeLst = doc.getElementsByTagName("server");
	System.out.println("Information of all servers");

	// Add the current root's attributes to the environment
	NamedNodeMap attributes = doc.getAttributes();
	if( attributes != null ) {
	    for( int a = 0; a < attributes.getLength(); a++ ) {
		Node attr = attributes.item(a);
		System.out.println( "NodeName=" + attr.getNodeName() );
		System.out.println( "NodeValue=" + attr.getNodeValue() );
		System.out.println( "Node=" + attr );
		env.put( attr.getNodeName(), new BasicStringType(attr.getNodeValue()) );
	    }
	}
	
	for (int s = 0; s < nodeLst.getLength(); s++) {
	    
	    Node currentNode = nodeLst.item(s);
	    System.out.println( "---Node: "+currentNode.getNodeName() );
	    
	    Environment<String,BasicType> child = env.createChild( currentNode.getNodeName() );
	    
	    if( currentNode.getNodeType() == Node.ELEMENT_NODE ) {
		
		Element currentElement = (Element) currentNode;
		NodeList currentElementList = currentElement.getElementsByTagName( "listen" );

		
		System.out.println( currentElementList );
		for( int l = 0; l < currentElementList.getLength(); l++ ) {
		    Node listen = currentElementList.item( l );
		    System.out.println( "item["+l+"] "+listen );
		    
		    /*NamedNodeMap attributes = listen.getAttributes();
		    for( int a = 0; a < attributes.getLength(); a++ ) {
			Node attr = attributes.item(a);
			System.out.println( "NodeName=" + attr.getNodeName() );
			System.out.println( "NodeValue=" + attr.getNodeValue() );
			System.out.println( "Node=" + attr );
			
			}*/
		}
		
	    }
	    
	}

	//return env;
	
    }

    public static void main( String argv[] ) {
	try {
	    read( new File( argv[0] ) );
	} catch( IOException e ) {
	    e.printStackTrace();
	}
    }
}